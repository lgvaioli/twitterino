{"version":3,"sources":["UserInfoView.js","App.js","serviceWorker.js","index.js"],"names":["UserInfoView","props","className","src","user","profilePicUrl","alt","username","following","followers","tweetsCount","currentStatus","App","onInputChange","event","newInput","target","value","length","slice","setState","input","onButtonClick","state","myHeaders","Headers","append","urlencoded","URLSearchParams","fetch","method","headers","body","redirect","then","response","status","alert","text","catch","error","json","data","charsLeftStyle","this","TWITTER_MAX_LENGTH","visibility","id","style","type","onChange","placeholder","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"uSAsBeA,MAbf,SAAsBC,GACpB,OACE,yBAAKC,UAAU,gBACf,yBAAKC,IAAKF,EAAMG,KAAKC,cAAeC,IAAI,gBACxC,wCAAa,2BAAIL,EAAMG,KAAKG,WAC5B,yCAAc,2BAAIN,EAAMG,KAAKI,YAC7B,yCAAc,2BAAIP,EAAMG,KAAKK,YAC7B,4CAAiB,2BAAIR,EAAMG,KAAKM,cAChC,8CAAmB,2BAAIT,EAAMG,KAAKO,kBCoFvBC,E,kDA5Fb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAQRY,cAAgB,SAACC,GACf,IACIC,EAAW,GAGbA,EAJaD,EAAME,OAAOC,MAAMC,OAdX,IAkBVJ,EAAME,OAAOC,MAAME,MAAM,EAlBf,KAoBVL,EAAME,OAAOC,MAG1B,EAAKG,SAAS,CAACC,MAAON,KAnBL,EAsBnBO,cAAgB,WAEd,GAAwB,KAArB,EAAKC,MAAMF,MAAd,CAMA,IAAIG,EAAY,IAAIC,QACpBD,EAAUE,OAAO,eAAgB,qCAEjC,IAAIC,EAAa,IAAIC,gBACrBD,EAAWD,OAAO,UAAW,EAAKH,MAAMF,OASxCQ,MAAM,WAPe,CACnBC,OAAQ,OACRC,QAASP,EACTQ,KAAML,EACNM,SAAU,WAITC,MAAK,SAAAC,GACJ,GAAuB,KAAnBA,EAASC,OAAe,CAG1B,IAAMhC,EAAI,eAAQ,EAAKmB,MAAMnB,MAC7BA,EAAKM,aAAe,EACpBN,EAAKO,cAAgB,EAAKY,MAAMF,MAEhC,EAAKD,SAAS,CAAEhB,KAAMA,EAAMiB,MAAO,KAEnCgB,MAAM,8BAGNA,MAAM,4BAAD,OAA6BF,EAASG,YAG9CC,OAAM,SAAAC,GAAK,OAAIH,MAAM,qBAAD,OAAsBG,YAnC3CH,MAAM,oCAtBR,EAAKd,MAAQ,CACXF,MAAO,GACPjB,KAAM,IALS,E,gEA+DE,IAAD,OAClByB,MAAM,SACHK,MAAK,SAAAC,GAAQ,OAAIA,EAASM,UAC1BP,MAAK,SAAAQ,GACJ,EAAKtB,SAAS,CAAEhB,KAAMsC,OAEvBH,OAAM,SAAAC,GAAK,OAAIH,MAAMG,Q,+BAIxB,IACMG,EADWC,KAAKrB,MAAMF,MAAMH,QA5EN2B,IA6EgC,CAACC,WAAY,WACvE,CAACA,WAAY,UAEf,OACE,yBAAK5C,UAAU,OACf,kBAAC,EAAD,CAAcE,KAAMwC,KAAKrB,MAAMnB,OAC/B,sDACA,uBACE2C,GAAG,aACHC,MAAOL,GAvFY,IAuF0BC,KAAKrB,MAAMF,MAAMH,OAFhE,oBAGA,2BAAO+B,KAAK,OAAOC,SAAUN,KAAK/B,cAAeI,MAAO2B,KAAKrB,MAAMF,MACjE8B,YAAY,4BACd,4BAAQC,QAASR,KAAKtB,eAAtB,a,GAvFY+B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACL6B,QAAQ7B,MAAMA,EAAM8B,c","file":"static/js/main.4b361da3.chunk.js","sourcesContent":["import React from 'react';\nimport './css/UserInfoView.css';\n\n/**\n * User info view functional component. Displays the user's profile picture and some info.\n * Required props:\n *  - user: A \"nice\" Twitter user object, as returned by the server (take a look at\n * the \"app.get('/user'\" function in server.js).\n */\nfunction UserInfoView(props) {\n  return (\n    <div className='UserInfoView'>\n    <img src={props.user.profilePicUrl} alt=\"profile pic\" />\n    <p>Username: <b>{props.user.username}</b></p>\n    <p>Following: <b>{props.user.following}</b></p>\n    <p>Followers: <b>{props.user.followers}</b></p>\n    <p>Tweets count: <b>{props.user.tweetsCount}</b></p>\n    <p>Current status: <b>{props.user.currentStatus}</b></p>\n    </div>\n  );\n}\n\nexport default UserInfoView;\n","import React from 'react';\nimport './css/App.css';\nimport UserInfoView from './UserInfoView';\n\n\nconst TWITTER_MAX_LENGTH = 280;\nconst TWITTER_LENGTH_WARNING = (TWITTER_MAX_LENGTH / 100) * 50; // 50%\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\",\n      user: { },\n    }\n  }\n\n  onInputChange = (event) => {\n    let inputLen = event.target.value.length;\n    let newInput = \"\";\n\n    if(inputLen > TWITTER_MAX_LENGTH) {\n      newInput = event.target.value.slice(0, TWITTER_MAX_LENGTH);\n    } else {\n      newInput = event.target.value;\n    }\n\n    this.setState({input: newInput});\n  }\n\n  onButtonClick = () => {\n    // Do nothing on empty input\n    if(this.state.input === \"\") {\n      alert(\"You can't send an empty message\");\n      return;\n    }\n\n    // Send POST to express server\n    let myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n    let urlencoded = new URLSearchParams();\n    urlencoded.append(\"message\", this.state.input);\n\n    let requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: \"follow\"\n    };\n\n    fetch(\"/message\", requestOptions)\n      .then(response => {\n        if (response.status == 200) {\n          // Success; update app state and show success alert\n\n          const user = { ...this.state.user };\n          user.tweetsCount += 1;\n          user.currentStatus = this.state.input;\n\n          this.setState({ user: user, input: \"\" });\n\n          alert('Tweet was successful!');\n        } else {\n          // Failure\n          alert(`Could not tweet message: ${response.text()}`);\n        }\n      })\n      .catch(error => alert(`Unexpected error: ${error}`));\n  }\n\n  componentDidMount() {\n    fetch(\"/user\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ user: data });\n      })\n      .catch(error => alert(error));\n  }\n\n  render() {\n    const inputLen = this.state.input.length;\n    const charsLeftStyle = inputLen >= TWITTER_LENGTH_WARNING ? {visibility: \"visible\"} :\n      {visibility: \"hidden\"};\n\n    return (\n      <div className=\"app\">\n      <UserInfoView user={this.state.user} />\n      <h1>Let's tweet a message!</h1>\n      <p\n        id=\"chars-left\"\n        style={charsLeftStyle}>{TWITTER_MAX_LENGTH - this.state.input.length} characters left</p>\n      <input type=\"text\" onChange={this.onInputChange} value={this.state.input}\n        placeholder=\"Write your message here\" />\n      <button onClick={this.onButtonClick}>Send</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}